[{"C:\\Users\\Dev\\Desktop\\portfolio\\src\\index.js":"1","C:\\Users\\Dev\\Desktop\\portfolio\\src\\App.js":"2","C:\\Users\\Dev\\Desktop\\portfolio\\src\\Iso-poly.js":"3"},{"size":149,"mtime":1611956735627,"results":"4","hashOfConfig":"5"},{"size":898,"mtime":1612337574833,"results":"6","hashOfConfig":"5"},{"size":11568,"mtime":1612337090511,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mb07wr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\Dev\\Desktop\\portfolio\\src\\index.js",[],["16","17"],"C:\\Users\\Dev\\Desktop\\portfolio\\src\\App.js",["18","19","20","21","22"],"C:\\Users\\Dev\\Desktop\\portfolio\\src\\Iso-poly.js",["23"],"import React, { useEffect, useRef, useState } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { useThree } from 'react-three-fiber'\n\nfunction Chair({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Chair_1.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Chair_2.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Chair_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Chair_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Lamp({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Hood_1.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Hood_2.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Lamp_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Lamp_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Soda({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh material={materials.Default_White} geometry={nodes.Can.geometry} />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Can_1.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Soda_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Soda_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Blinds({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh material={materials.Default_White} geometry={nodes.Blinds.geometry}>\n        <group visible={label}>\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Blinds_Label_1.geometry}\n          />\n          <mesh\n            material={materials.Default_White}\n            geometry={nodes.Blinds_Label_2.geometry}\n          />\n        </group>\n      </mesh>\n    </group>\n  )\n}\n\nfunction Computer({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Plane.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Plane_1.geometry}\n      />\n      <group>\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Cube.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Cube_1.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Laptop_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Laptop_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Garbage({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Bin_1.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Bin_2.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Garbage.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Garbage_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Garbage_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Room({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Walls_Floor.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Walls_Floor_1.geometry}\n      />\n    </group>\n  )\n}\n\nfunction Rug({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Rug_1.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Rug_2.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Rug_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Rug_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Books({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Book_02.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Book_02_1.geometry}\n      />\n      <group>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Book_01_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Book_01_2.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Books_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Books_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction WallArt({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Wall_Art_1.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Wall_Art_2.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Art_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Art_Label_2.geometry}\n        />\n      </group>\n    </group>\n  )\n}\n\nfunction Clock({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.cbody.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.cbody_1.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Clock_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Clock_Label_2.geometry}\n        />\n      </group>\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Large_Hand.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Small_Hand.geometry}\n      />\n    </group>\n  )\n}\n\nfunction Glasses({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n  return (\n    <group\n      onPointerEnter={() => {\n        setLabel(true)\n      }}\n      onPointerLeave={() => {\n        setLabel(false)\n      }}\n    >\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Sunglasses.geometry}\n      >\n        <group visible={label}>\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Glasses_Label_1.geometry}\n          />\n          <mesh\n            material={materials.Default_White}\n            geometry={nodes.Glasses_Label_2.geometry}\n          />\n        </group>\n      </mesh>\n    </group>\n  )\n}\n\nfunction TextHeaders({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Hello.geometry}\n        position={[-0.83, 1.18, 0.73]}\n        rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Im_Trevor.geometry}\n        position={[-0.83, 0.95, 0.14]}\n        rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.I_Create.geometry}\n        position={[-0.83, 0.87, 0.14]}\n        rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n      />\n    </group>\n  )\n}\n\nfunction Desk({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Cylinder.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Cylinder_1.geometry}\n      />\n    </group>\n  )\n}\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/portfolio/models/iso-poly.gltf')\n\n  const { camera, viewport } = useThree()\n\n  useEffect(() => {\n    camera.fov = 21\n    camera.lookAt(0, 0, 0)\n    camera.updateProjectionMatrix()\n  })\n\n  return (\n    <group\n      ref={group}\n      dispose={null}\n      position={[0, -0.73, 0]}\n      rotation={[0, -0.8, 0]}\n    >\n      <TextHeaders nodes={nodes} materials={materials} />\n      <Room nodes={nodes} materials={materials} />\n      <Chair nodes={nodes} materials={materials} />\n      <Lamp nodes={nodes} materials={materials} />\n      <Soda nodes={nodes} materials={materials} />\n      <Blinds nodes={nodes} materials={materials} />\n      <Computer nodes={nodes} materials={materials} />\n      <Garbage nodes={nodes} materials={materials} />\n      <Rug nodes={nodes} materials={materials} />\n      <Books nodes={nodes} materials={materials} />\n      <WallArt nodes={nodes} materials={materials} />\n      <Clock nodes={nodes} materials={materials} />\n      <Glasses nodes={nodes} materials={materials} />\n      <Desk nodes={nodes} materials={materials} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/iso-poly.gltf')\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":23},{"ruleId":"28","severity":1,"message":"32","line":1,"column":35,"nodeType":"30","messageId":"31","endLine":1,"endColumn":44},{"ruleId":"28","severity":1,"message":"33","line":1,"column":46,"nodeType":"30","messageId":"31","endLine":1,"endColumn":61},{"ruleId":"28","severity":1,"message":"34","line":2,"column":16,"nodeType":"30","messageId":"31","endLine":2,"endColumn":29},{"ruleId":"28","severity":1,"message":"35","line":3,"column":33,"nodeType":"30","messageId":"31","endLine":3,"endColumn":40},{"ruleId":"28","severity":1,"message":"36","line":447,"column":19,"nodeType":"30","messageId":"31","endLine":447,"endColumn":27},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useLayoutEffect' is defined but never used.","'OrbitControls' is defined but never used.","'Outline' is defined but never used.","'viewport' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]