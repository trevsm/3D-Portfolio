[{"C:\\Users\\Dev\\Desktop\\portfolio\\src\\index.js":"1","C:\\Users\\Dev\\Desktop\\portfolio\\src\\App.js":"2","C:\\Users\\Dev\\Desktop\\portfolio\\src\\Iso-poly.js":"3"},{"size":149,"mtime":1611956735627,"results":"4","hashOfConfig":"5"},{"size":898,"mtime":1612383786265,"results":"6","hashOfConfig":"5"},{"size":16926,"mtime":1612386745272,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1mb07wr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"C:\\Users\\Dev\\Desktop\\portfolio\\src\\index.js",[],["17","18"],"C:\\Users\\Dev\\Desktop\\portfolio\\src\\App.js",["19","20","21","22","23"],"import React, { useRef, Suspense, useEffect, useLayoutEffect } from 'react'\r\nimport { Html, OrbitControls } from '@react-three/drei'\r\nimport { EffectComposer, Noise, Outline } from 'react-postprocessing'\r\nimport { Canvas } from 'react-three-fiber'\r\nimport Model from './Iso-poly'\r\n\r\n// import './App.css'\r\n\r\nfunction LoadOverlay() {\r\n  return (\r\n    <Html center>\r\n      <div className=\"loader-2\">Finishing up...</div>\r\n    </Html>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <Canvas\r\n      pixelRatio={window.devicePixelRatio}\r\n      camera={{ position: [0, 2, 4] }}\r\n    >\r\n      {/* <OrbitControls /> */}\r\n      <ambientLight intensity={0.9} />\r\n      <directionalLight intensity={0.5} />\r\n      <Suspense fallback={<LoadOverlay />}>\r\n        <Model />\r\n      </Suspense>\r\n      <EffectComposer>\r\n        <Noise opacity={0.03} />\r\n      </EffectComposer>\r\n    </Canvas>\r\n  )\r\n}\r\n","C:\\Users\\Dev\\Desktop\\portfolio\\src\\Iso-poly.js",["24"],"import React, { useEffect, useRef, useState } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { useThree } from 'react-three-fiber'\n\nfunction Chair({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Chair.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Chair_1.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Chair_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Chair_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Chair_Text.geometry}\n          position={[-0.06, 0.83, 0.14]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Chair_CTV.geometry}\n            position={[0, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Lamp({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Hood_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Hood_2.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Lamp_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Lamp_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Lamp_Text.geometry}\n          position={[-0.68, 0.88, 0.1]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Lamp_CTV.geometry}\n            position={[-0.01, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Soda({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Can.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Can_1.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Soda_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Soda_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Soda_Text.geometry}\n          position={[-0.59, 0.75, -0.52]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Soda_CTV.geometry}\n            position={[-0.01, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Blinds({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <mesh\n        visible={false}\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n        material={materials.Material}\n        geometry={nodes.Blinds_HitBox.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Blinds.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Blinds_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Blinds_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Blinds_Text.geometry}\n          position={[-0.54, 1.02, -0.9]}\n          rotation={[Math.PI / 2, 0, 0]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Blinds_CTV.geometry}\n            position={[0.01, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Computer({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Computer_1.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Computer_2.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Cube.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Cube_1.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Laptop_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Laptop_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Laptop_Text.geometry}\n          position={[-0.64, 0.73, -0.19]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Laptop_CTV.geometry}\n            position={[0.01, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Garbage({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Bin_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Bin_2.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Garbage.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Garbage_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Garbage_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Garbage_Text.geometry}\n          position={[-0.59, 0.44, 0.67]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Garbage_CTV.geometry}\n            position={[0.02, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Room({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Walls_Floor.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Walls_Floor_1.geometry}\n      />\n    </group>\n  )\n}\n\nfunction Rug({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Rug_1.geometry}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Rug_2.geometry}\n      />\n    </group>\n  )\n}\n\nfunction Books({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Book_02.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Book_02_1.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Book_01_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Book_01_2.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Books_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Books_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Books_Text.geometry}\n          position={[-0.81, 0.71, -0.59]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Books_CTV.geometry}\n            position={[0.03, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction WallArt({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <mesh\n        visible={false}\n        material={materials.Material}\n        geometry={nodes.Art_HitBox.geometry}\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Wall_Art_1.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Wall_Art_2.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Art_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Art_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Art_Text.geometry}\n          position={[-0.77, 0.58, 0.84]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Art_CTV.geometry}\n            position={[0.02, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Clock({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <group\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      >\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.cbody.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.cbody_1.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Large_Hand.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Small_Hand.geometry}\n        />\n      </group>\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Clock_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Clock_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Clock_Text.geometry}\n          position={[0.59, 1.35, -0.9]}\n          rotation={[Math.PI / 2, 0, 0]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Clock_CTV.geometry}\n            position={[-0.01, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction Glasses({ materials, nodes }) {\n  const [label, setLabel] = useState(false)\n\n  useEffect(() => {\n    document.body.style.cursor = label ? 'pointer' : 'auto'\n  }, [label])\n\n  return (\n    <group>\n      <mesh\n        visible={false}\n        material={materials.Material}\n        geometry={nodes.Glasses_HitBox.geometry}\n        onPointerEnter={() => {\n          setLabel(true)\n        }}\n        onPointerLeave={() => {\n          setLabel(false)\n        }}\n      />\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Glasses.geometry}\n      />\n      <group visible={label}>\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Glasses_Label_1.geometry}\n        />\n        <mesh\n          material={materials.Default_White}\n          geometry={nodes.Glasses_Label_2.geometry}\n        />\n        <mesh\n          material={materials.Default_Color}\n          geometry={nodes.Glasses_Text.geometry}\n          position={[-0.72, 0.69, -0.42]}\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n        >\n          <mesh\n            material={materials.Default_Color}\n            geometry={nodes.Glasses_CTV.geometry}\n            position={[0.01, 0, 0.04]}\n          />\n        </mesh>\n      </group>\n    </group>\n  )\n}\n\nfunction TextHeaders({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Hello.geometry}\n        position={[-0.83, 1.18, 0.73]}\n        rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Im_Trevor.geometry}\n        position={[-0.83, 0.95, 0.14]}\n        rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.I_Create.geometry}\n        position={[-0.83, 0.87, 0.14]}\n        rotation={[Math.PI / 2, 0, -Math.PI / 2]}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Look_Around.geometry}\n        position={[0.21, 0.41, -0.9]}\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={[0.87, 0.87, 0.87]}\n      />\n    </group>\n  )\n}\n\nfunction Desk({ materials, nodes }) {\n  return (\n    <group>\n      <mesh\n        material={materials.Default_White}\n        geometry={nodes.Desk_1.geometry}\n      />\n      <mesh\n        material={materials.Default_Color}\n        geometry={nodes.Desk_2.geometry}\n      />\n    </group>\n  )\n}\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/portfolio/models/iso-poly.gltf')\n\n  const { camera, viewport } = useThree()\n\n  useEffect(() => {\n    camera.fov = 23\n    camera.lookAt(0, 0, 0)\n    camera.updateProjectionMatrix()\n  })\n\n  return (\n    <group\n      ref={group}\n      dispose={null}\n      position={[0, -0.76, 0]}\n      rotation={[0, -0.8, 0]}\n    >\n      <TextHeaders nodes={nodes} materials={materials} />\n      <Room nodes={nodes} materials={materials} />\n      <Chair nodes={nodes} materials={materials} />\n      <Lamp nodes={nodes} materials={materials} />\n      <Soda nodes={nodes} materials={materials} />\n      <Blinds nodes={nodes} materials={materials} />\n      <Computer nodes={nodes} materials={materials} />\n      <Garbage nodes={nodes} materials={materials} />\n      <Rug nodes={nodes} materials={materials} />\n      <Books nodes={nodes} materials={materials} />\n      <WallArt nodes={nodes} materials={materials} />\n      <Clock nodes={nodes} materials={materials} />\n      <Glasses nodes={nodes} materials={materials} />\n      <Desk nodes={nodes} materials={materials} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/iso-poly.gltf')\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":1,"column":17,"nodeType":"31","messageId":"32","endLine":1,"endColumn":23},{"ruleId":"29","severity":1,"message":"33","line":1,"column":35,"nodeType":"31","messageId":"32","endLine":1,"endColumn":44},{"ruleId":"29","severity":1,"message":"34","line":1,"column":46,"nodeType":"31","messageId":"32","endLine":1,"endColumn":61},{"ruleId":"29","severity":1,"message":"35","line":2,"column":16,"nodeType":"31","messageId":"32","endLine":2,"endColumn":29},{"ruleId":"29","severity":1,"message":"36","line":3,"column":33,"nodeType":"31","messageId":"32","endLine":3,"endColumn":40},{"ruleId":"29","severity":1,"message":"37","line":632,"column":19,"nodeType":"31","messageId":"32","endLine":632,"endColumn":27},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useLayoutEffect' is defined but never used.","'OrbitControls' is defined but never used.","'Outline' is defined but never used.","'viewport' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]